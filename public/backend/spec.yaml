openapi: "3.0.0"
info:
  title: eCommerce webSite API
  description: 'This is a event shop where people can buy ticket for artistic event where performer performs or seminar where artistic events are explanied'
  version: "1.0.0"
  contact:
    email: "leonardo.panizzo@mail.polimi.it"
servers:
  - description: Url where you can find our website
    url: https://hypermdia-magatti-panizzo.herokuapp.com/
tags:
  - name: "artisticEvent"
    description: "operation regarding the artistic events"
  - name: "performer"
    description: "operation regarding the performers"
  - name: "performs"
    description: "operation regarding who performs where"
  - name: "reservationArtisticEvent"
    description: "operation regarding the artistic events reserved by the users"
  - name: "reservationSeminar"
    description: "operation regarding the seminars reserved by the users"
  - name: "seminar"
    description: "operation regarding the seminars"
  - name: "users"
    description: "operations about signup/login/logout"
paths:
  /artisticEvent:
    get:
      tags:
      - artisticEvent
      summary: "artisticEvent available in the inventory"
      description: "List of all the artistic events in the inventory"
      operationId: "getArtisticEvent"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/artisticEvent'
  /artisticEvent/types:
    get:
      tags:
      - artisticEvent
      summary: "available types of artistic events"
      description: "List of all the types of artistic event"
      operationId: "getTypes"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: character varying
  /artisticEvent/today:
    get:
      tags:
      - artisticEvent
      summary: "artistic events programmed for today"
      description: "list of all artistic events programmed for today"
      operationId: "getArtisticEventToday"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/artisticEvent'
  /artisticEvent/{id}:
    get:
      tags:
      - artisticEvent
      summary: "get artistic event by ID"
      description: "return the information of a specific artistic event through his ID"
      operationId: "getArtisticEventByID"
      parameters:
      - name: "id"
        in: "path"
        description: "the artistic event's id of the artistic event that needs to be fetched"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artisticEvent'
        '404':
          description: "invalid input"
  /artisticEvent/type/{type}:
    get:
      tags:
      - artisticEvent
      summary: "get artistic events by type"
      description: "return the information about artistic events of a specific type"
      operationId: "getArtisticEventByType"
      parameters:
      - name: "type"
        in: "path"
        description: "the type used to filter the artistic events"
        required: true
        schema:
          type: string
          format: character varying
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/artisticEvent'
        '404':
          description: "invalid input"
  /artisticEvent/performer/{id}:
    get:
      tags:
      - artisticEvent
      summary: "get artistic with a specific performer"
      description: "return the information of a specific artistic where the performer with a specific ID performs"
      operationId: "getArtisticEventByPerformer"
      parameters:
      - name: "id"
        in: "path"
        description: "the performer ID"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/artisticEvent'
        '404':
          description: "invalid input"
  /artisticEvent/sameDay/{id}:
    get:
      tags:
      - artisticEvent
      summary: "get artistic event in the same day"
      description: "return the information of a specific artistic event that is in the same day as the one with the ID passed in the path"
      operationId: "getArtisticEventBySameDay"
      parameters:
      - name: "id"
        in: "path"
        description: "the artistic event's id to find the date of the exibition"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/artisticEvent'
        '404':
          description: "invalid input"
  /artisticEvent/seminar/{id}:
    get:
      tags:
      - artisticEvent
      summary: "get artistic event explaine in the seminar"
      description: "return the information of a specific artistic event that explained in the seminar with the passed ID"
      operationId: "getArtisticEventBySeminar"
      parameters:
      - name: "id"
        in: "path"
        description: "the seminar's ID"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artisticEvent'
        '404':
          description: "invalid input"
  /seminar:
    get:
      tags:
      - seminar
      summary: "get all the seminars in the inventory"
      description: "List of all the seminars in the inventory"
      operationId: "getSeminar"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/seminar'
  /seminar/today:
    get:
      tags:
      - seminar
      summary: "seminars programmed for today"
      description: "list of all the seminars programmed for today"
      operationId: "getSeminarToday"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/seminar'
  /seminar/{id}:
    get:
      tags:
      - seminar
      summary: "get seminar by ID"
      description: "return the information of a specific seminar through his ID"
      operationId: "getSeminarByID"
      parameters:
      - name: "id"
        in: "path"
        description: "the seminar's id of the seminar that needs to be fetched"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/seminar'
        '404':
          description: "invalid input"
  /seminar/artisticEvent/{id}:
    get:
      tags:
      - seminar
      summary: "get the seminar that explain the artistic event with the passed ID"
      description: "get the information of the seminar that explain the artistic event with the passed ID"
      operationId: "getSeminarByArtisticEvent"
      parameters:
      - name: "id"
        in: "path"
        description: "artistic event's id"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/seminar'
        '404':
          description: "invalid input"
  /performer:
    get:
      tags:
      - performer
      summary: "performers available in the database"
      description: "List of all the performers available in the inventory"
      operationId: "getPerformer"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/performer'
  /performer/{id}:
    get:
      tags:
      - performer
      summary: "get performer by ID"
      description: "return the information of a specific performer through his ID"
      operationId: "getPerformerByID"
      parameters:
      - name: "id"
        in: "path"
        description: "the performer's id of the performer that needs to be fetched"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performer'
        '404':
          description: "invalid input"
  /performer/artisticEvent/{id}:
    get:
      tags:
      - performer
      summary: "get the performers tha perform in the artistic event"
      description: "get the information of the performers that plays in the artistic event with the passed ID"
      operationId: "getPerformerByArtisticEvent"
      parameters:
      - name: "id"
        in: "path"
        description: "artistic event's id"
        required: true
        schema:
          type: integer
          format: integer
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/performer'
        '404':
          description: "invalid input"
  /user/login:
    post:
      tags:
      - users
      summary: "login"
      description: "user login"
      operationId: "login"
      requestBody:
        $ref: '#/components/requestBodies/logIn'
      responses:
        '200':
          description: "successful operation"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: iduser=1; Path=/;
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "password or email incorrect"
  /user/logout:
    delete:
      tags:
      - users
      summary: "logout"
      description: "the user logs out of the session"
      operationId: "logout"
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: "successful operation"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: iduser=1; Path=/;
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:
                      message: "Logged out"
  /user/signup:
    post:
      tags:
      - users
      summary: "signup"
      description: "register a user in the site"
      operationId: "signup"
      requestBody:
        $ref: '#/components/requestBodies/registrationForm'
      responses:
        '201':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: boolean
        '400':
          description: "email already in use"
  /reservationArtisticEvent:
    get:
      tags:
      - reservationArtisticEvent
      summary: "get reservation of artstic events"
      description: "get the list with the artistic event booked by the user"
      operationId: "getReservationArtisticEvent"
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/artisticEvent'
        '400':
          description: "user not logged"
    post:
      tags:
      - reservationArtisticEvent
      summary: "Add an artistic event to the reservation"
      description: "Add an artistic event to the reservation"
      operationId: "addReservationArtisticEvent"
      parameters:
        - $ref: '#/components/parameters/cookie'
      requestBody:
        description: "A JSON object containing the id of the artistic event to add"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: integer
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
    delete:
      tags:
      - reservationArtisticEvent
      summary: "empty the reservation of the artistic events"
      description: "empty the reservation of the artistic events"
      operationId: "emptyReservationArtisticEvent"
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
  /reservationtArtisticEvent/{id}:
    get:
      tags:
      - reservationArtisticEvent
      summary: "check if a specific artistic event is already booked"
      description: "check if the artistic event whose ID is passed in the path is already booked"
      operationId: "checkReservationArtisticEvent"
      parameters:
        - name: "id"
          in: "path"
          description: "artistic event's ID"
          required: true
          schema:
            type: integer
            format: integer
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
    delete:
      tags:
      - reservationtArtisticEvent
      summary: "delete the reservation of an artistic event"
      description: "delete the reservation of the artistic event whose ID is passed in the path"
      operationId: "deleteRervationArtisticEvent"
      parameters:
        - name: "id"
          in: "path"
          description: "artistic event's ID"
          required: true
          schema:
            type: integer
            format: integer
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
  /reservationSeminar:
    get:
      tags:
      - reservationSeminar
      summary: "get reservation of seminars"
      description: "get the list with the seminarst booked by the user"
      operationId: "getReservationSeminar"
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/seminar'
        '400':
          description: "user not logged"
    post:
      tags:
      - reservationSeminar
      summary: "Add a seminar to the reservation"
      description: "Add a seminar to the reservation"
      operationId: "addReservationSeminar"
      parameters:
        - $ref: '#/components/parameters/cookie'
      requestBody:
        description: "A JSON object containing the id of the artistic event to add"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: integer
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
    delete:
      tags:
      - reservationSeminar
      summary: "empty the reservation of the seminars"
      description: "empty the reservation of the seminars"
      operationId: "emptyReservationSeminar"
      parameters:
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
  /reservationSeminar/{id}:
    get:
      tags:
      - reservationSemiar
      summary: "check if a specific seminar is already booked"
      description: "check if the seminar whose ID is passed in the path is already booked"
      operationId: "checkReservationSeminar"
      parameters:
        - name: "id"
          in: "path"
          description: "seminar's ID"
          required: true
          schema:
            type: integer
            format: integer
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
    delete:
      tags:
      - reservationSeminar
      summary: "delete the reservation of a seminar"
      description: "delete the reservation of the seminar whose ID is passed in the path"
      operationId: "deleteRervationSeminar"
      parameters:
        - name: "id"
          in: "path"
          description: "seminar's ID"
          required: true
          schema:
            type: integer
            format: integer
        - $ref: '#/components/parameters/cookie'
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "user not logged"
components:
  parameters:
    cookie:
      name: iduser
      in: cookie
      description: ""
      schema:
        type: string
  schemas:
    artisticEvent:
      type: object
      properties:
        idevent:
          type: integer
          format: integer
        title:
          type: string
          format: character varying
        description:
          type: string
          format: character varying
        place:
          type: string
          format: character varying
        type:
          type: string
          format: character varying
        dateAndTime:
          type: string
          format: timestamp without time zone
        idseminar:
          type: integer
          format: integer
      example:
        idevent: 1
        title: "Rock Show"
        description: "the x band will perform a rock show in y location"
        place: "Milan"
        type: "music"
        dateAndTime: "2019-09-21 15:30:00"
        idseminar: 4
    performer:
      type: object
      properties:
        idperformer:
          type: integer
          format: integer
        name:
          type: string
          format: character varying
        members:
          type: string
          format: character varying
        isgroup:
          type: boolean
          format: boolean
        affiliation:
          type: string
          format: character varying
        details:
          type: string
          format: character varying
        achievements:
          type: string
          format: character varying
        shortdescription:
          type: string
          format: character varying
      example:
        idperformer: 2
        name: "Against the Current"
        members: "Chrissy Costanza, Will Ferri, Dan Gow"
        isgroup: true
        affiliation: "Fueled by Ramen"
        details: "Against The Current (often abbreviated as ATC) is an American pop rock band based in Poughkeepsie, New York, and formed in 2011. More specifically, they play various variations of pop and rock, going from pure pop to pop punk and alternative rock. Against the Current was formed in early 2011 by Dan Gow, Will Ferri, and Jeremy Rompala and was later joined by Chrissy Costanza in the summer of 2011 after being introduced to Gow, Ferri, and Rompala through a mutual friend."
        achievements: ""
        shortdescription: "American rock pop band"
    performs:
      type: object
      properties:
        idperformer:
          type: integer
          format: integer
        idevent:
          type: integer
          format: integer
      example:
        idperformer: 3
        idevent: 2
    reservationArtisticEvent:
      type: object
      properties:
        iduser:
          type: integer
          format: integer
        idevent:
          type: integer
          format: integer
      example:
        iduser: 5
        idevent: 9
    reservationSeminar:
      type: object
      properties:
        iduser:
          type: integer
          format: integer
        idseminar:
          type: integer
          format: integer
      example:
        iduser: 5
        idseminar: 9
    seminar:
      type: object
      properties:
        idseminar:
          type: integer
          format: integer
        place:
          type: string
          format: character varying
        title:
          type: string
          format: character varying
        description:
          type: string
          format: character varying
        dateAndTime:
          type: string
          format: timestamp without time zone
      example:
        idseminar: 2
        place: "Via Vincenzo Monti 13, Milan"
        title: "The story of Orpheus and Eurydice"
        description: "What do we actually know about the ancient sotry of Orpheus and Eurydice? This seminar explores its deepest meanings, with a detailed analysis of different versions and what the same story impacted different generations in different historical and geopolitical contests."
        dateAndTime: "2019-09-05 20:00:00"
    users:
      type: object
      properties:
        iduser:
          type: integer
          format: integer
        mail:
          type: string
          format: character varying
        password:
          type: string
          format: character varying
        name:
          type: string
          format: character varying
  requestBodies:
    registrationForm: "A JSON object containing user information"
    required: true
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/users'
    logIn:
      description: "A JSON object containing information to login"
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              mail:
                type: string
                format: character varying
              pass:
                type: string
                format: character varying
